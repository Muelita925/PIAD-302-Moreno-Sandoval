package javaapplication10;

import java.sql.*;
import java.util.*;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;

public class Crud_Senati_Productos extends javax.swing.JFrame {

    
    public Crud_Senati_Productos() {
        initComponents();
        cargarProductosEnTabla();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnInsertar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        txtProductID = new javax.swing.JTextField();
        txtProductName = new javax.swing.JTextField();
        txtSupplierID = new javax.swing.JTextField();
        txtCategoryID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Productos");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btnInsertar.setText("Insertar");
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnInsertar)
                                    .addComponent(btnActualizar)
                                    .addComponent(btnEliminar))
                                .addGap(79, 79, 79)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtProductID)
                                    .addComponent(txtProductName)
                                    .addComponent(txtSupplierID)
                                    .addComponent(txtCategoryID, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE))))))
                .addContainerGap(121, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsertar)
                    .addComponent(txtProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(btnActualizar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(txtSupplierID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(btnEliminar)
                        .addGap(45, 45, 45))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCategoryID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>                        

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        insertarProducto();
    }                                           

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        actualizarProducto();
    }                                             

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        eliminarProducto();
    }                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Crud_Senati_Productos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Crud_Senati_Productos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Crud_Senati_Productos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Crud_Senati_Productos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Crud_Senati_Productos().setVisible(true);
            }
        });
    }

    
    public Connection conectar() {
        Connection cn = null;
        try {
            String jdbc_url = "jdbc:sqlserver://localhost:1433;encrypt=false;databaseName=Northwind";
            cn = DriverManager.getConnection(jdbc_url,"sa","1234");
            
            if (cn != null) {
                System.out.println("Conexion Exitosa");
            }
            } catch (SQLException ex) {                
            }
        return cn;
    }
    
    public ResultSet listarProductos() {
    String consulta = "SELECT * FROM Products";
    ResultSet resultados = null;
    try {
        Statement sentencia = conectar().createStatement();
        resultados = sentencia.executeQuery(consulta);
        
    } catch (SQLException e) {
        
        System.out.println("Error al listar productos: " + e.getMessage());
    }
    return resultados;
}

    public void cargarProductosEnTabla() {
    ResultSet rs = listarProductos();
    String[] columnas = {"ProductID", "ProductName", "SupplierID", "CategoryID"};
    DefaultTableModel model = new DefaultTableModel(null, columnas);

    try {
        while (rs.next()) {
            String[] fila = new String[4];
            fila[0] = rs.getString("ProductID");
            fila[1] = rs.getString("ProductName");
            fila[2] = rs.getString("SupplierID");
            fila[3] = rs.getString("CategoryID");
            model.addRow(fila);
        }
    } catch (SQLException e) {
        System.out.println("Error cargando productos en tabla: " + e.getMessage());
    }
    jTable1.setModel(model);
}
    
    
    public void insertarProducto() {
    String nombre = txtProductName.getText();
    String supplierIdStr = txtSupplierID.getText();
    String categoryIdStr = txtCategoryID.getText();

    if (nombre.isEmpty() || supplierIdStr.isEmpty() || categoryIdStr.isEmpty()) {
        System.out.println("Todos los campos deben estar llenos.");
        return;
    }

    try {
        int supplierId = Integer.parseInt(supplierIdStr);
        int categoryId = Integer.parseInt(categoryIdStr);

        String sql = "INSERT INTO Products (ProductName, SupplierID, CategoryID) VALUES (?, ?, ?)";

        try (Connection cn = conectar();
             PreparedStatement ps = cn.prepareStatement(sql)) {

            ps.setString(1, nombre);
            ps.setInt(2, supplierId);
            ps.setInt(3, categoryId);
            ps.executeUpdate();
            System.out.println("Producto insertado");
            cargarProductosEnTabla();
        }

    } catch (NumberFormatException e) {
        System.out.println("SupplierID y CategoryID deben ser números.");
    } catch (SQLException e) {
        System.out.println("Error al insertar: " + e.getMessage());
    }
}

public void actualizarProducto() {
    String idStr = txtProductID.getText();
    String nombre = txtProductName.getText();

    if (idStr.isEmpty() || nombre.isEmpty()) {
        System.out.println("ID y nombre no pueden estar vacíos.");
        return;
    }

    int id;
    try {
        id = Integer.parseInt(idStr);
    } catch (NumberFormatException e) {
        System.out.println("El ID debe ser un número.");
        return;
    }

    String sql = "UPDATE Products SET ProductName = ? WHERE ProductID = ?";

    try (Connection cn = conectar();
         PreparedStatement ps = cn.prepareStatement(sql)) {

        ps.setString(1, nombre);
        ps.setInt(2, id);

        int filasAfectadas = ps.executeUpdate();

        if (filasAfectadas > 0) {
            System.out.println("Producto actualizado");
            cargarProductosEnTabla();
        } else {
            System.out.println("No se encontró producto con ese ID");
        }

    } catch (SQLException e) {
        System.out.println("Error al actualizar: " + e.getMessage());
    }
}

public void eliminarProducto() {
    String idStr = txtProductID.getText().trim();

    if (idStr.isEmpty()) {
        System.out.println("El ID no puede estar vacío.");
        return;
    }

    int id;
    try {
        id = Integer.parseInt(idStr);
    } catch (NumberFormatException e) {
        System.out.println("El ID debe ser un número.");
        return;
    }

    String sql = "DELETE FROM Products WHERE ProductID = ?";

    try (Connection cn = conectar();
         PreparedStatement ps = cn.prepareStatement(sql)) {

        ps.setInt(1, id);

        int filasAfectadas = ps.executeUpdate();

        if (filasAfectadas > 0) {
            System.out.println("Producto eliminado");
            cargarProductosEnTabla();

            txtProductID.setText("");
            txtProductName.setText("");
            txtSupplierID.setText("");
            txtCategoryID.setText("");
        } else {
            System.out.println("No se encontró producto con ese ID");
        }

    } catch (SQLException e) {
        System.out.println("Error al eliminar: " + e.getMessage());
    }
}
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtCategoryID;
    private javax.swing.JTextField txtProductID;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtSupplierID;
    // End of variables declaration                   
}
